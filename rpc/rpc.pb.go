// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Response to the client, when it asks for the MerkleRoot of the directory
type MerkleRootResponse struct {
	NodeAddress          string   `protobuf:"bytes,1,opt,name=nodeAddress,proto3" json:"nodeAddress,omitempty"`
	IsValid              bool     `protobuf:"varint,2,opt,name=isValid,proto3" json:"isValid,omitempty"`
	MerkleRoot           []byte   `protobuf:"bytes,3,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleRootResponse) Reset()         { *m = MerkleRootResponse{} }
func (m *MerkleRootResponse) String() string { return proto.CompactTextString(m) }
func (*MerkleRootResponse) ProtoMessage()    {}
func (*MerkleRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e1404ce40aeb91d0, []int{0}
}
func (m *MerkleRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleRootResponse.Unmarshal(m, b)
}
func (m *MerkleRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleRootResponse.Marshal(b, m, deterministic)
}
func (dst *MerkleRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleRootResponse.Merge(dst, src)
}
func (m *MerkleRootResponse) XXX_Size() int {
	return xxx_messageInfo_MerkleRootResponse.Size(m)
}
func (m *MerkleRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleRootResponse proto.InternalMessageInfo

func (m *MerkleRootResponse) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

func (m *MerkleRootResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *MerkleRootResponse) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

// Request made by client for getting the MerkleRoot of a node
type MerkleRootRequest struct {
	// int32 getProof = 1;
	LeafIdx int32 `protobuf:"varint,1,opt,name=leafIdx,proto3" json:"leafIdx,omitempty"`
	// repeated Proof proof = 1;
	// repeated Proof proof = 1;
	// int32 ValidateLeaf = 2;
	Leaf                 []byte   `protobuf:"bytes,2,opt,name=leaf,proto3" json:"leaf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleRootRequest) Reset()         { *m = MerkleRootRequest{} }
func (m *MerkleRootRequest) String() string { return proto.CompactTextString(m) }
func (*MerkleRootRequest) ProtoMessage()    {}
func (*MerkleRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e1404ce40aeb91d0, []int{1}
}
func (m *MerkleRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleRootRequest.Unmarshal(m, b)
}
func (m *MerkleRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleRootRequest.Marshal(b, m, deterministic)
}
func (dst *MerkleRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleRootRequest.Merge(dst, src)
}
func (m *MerkleRootRequest) XXX_Size() int {
	return xxx_messageInfo_MerkleRootRequest.Size(m)
}
func (m *MerkleRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleRootRequest proto.InternalMessageInfo

func (m *MerkleRootRequest) GetLeafIdx() int32 {
	if m != nil {
		return m.LeafIdx
	}
	return 0
}

func (m *MerkleRootRequest) GetLeaf() []byte {
	if m != nil {
		return m.Leaf
	}
	return nil
}

type Proof struct {
	Proof                map[string][]byte `protobuf:"bytes,1,rep,name=proof,proto3" json:"proof,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_e1404ce40aeb91d0, []int{2}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proof.Unmarshal(m, b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
}
func (dst *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(dst, src)
}
func (m *Proof) XXX_Size() int {
	return xxx_messageInfo_Proof.Size(m)
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetProof() map[string][]byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*MerkleRootResponse)(nil), "rpc.MerkleRootResponse")
	proto.RegisterType((*MerkleRootRequest)(nil), "rpc.MerkleRootRequest")
	proto.RegisterType((*Proof)(nil), "rpc.Proof")
	proto.RegisterMapType((map[string][]byte)(nil), "rpc.Proof.ProofEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetMerkleRootClient is the client API for GetMerkleRoot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetMerkleRootClient interface {
	CalculateMerkleRoot(ctx context.Context, in *MerkleRootRequest, opts ...grpc.CallOption) (*MerkleRootResponse, error)
}

type getMerkleRootClient struct {
	cc *grpc.ClientConn
}

func NewGetMerkleRootClient(cc *grpc.ClientConn) GetMerkleRootClient {
	return &getMerkleRootClient{cc}
}

func (c *getMerkleRootClient) CalculateMerkleRoot(ctx context.Context, in *MerkleRootRequest, opts ...grpc.CallOption) (*MerkleRootResponse, error) {
	out := new(MerkleRootResponse)
	err := c.cc.Invoke(ctx, "/rpc.GetMerkleRoot/CalculateMerkleRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetMerkleRootServer is the server API for GetMerkleRoot service.
type GetMerkleRootServer interface {
	CalculateMerkleRoot(context.Context, *MerkleRootRequest) (*MerkleRootResponse, error)
}

func RegisterGetMerkleRootServer(s *grpc.Server, srv GetMerkleRootServer) {
	s.RegisterService(&_GetMerkleRoot_serviceDesc, srv)
}

func _GetMerkleRoot_CalculateMerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetMerkleRootServer).CalculateMerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GetMerkleRoot/CalculateMerkleRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetMerkleRootServer).CalculateMerkleRoot(ctx, req.(*MerkleRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetMerkleRoot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.GetMerkleRoot",
	HandlerType: (*GetMerkleRootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateMerkleRoot",
			Handler:    _GetMerkleRoot_CalculateMerkleRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_e1404ce40aeb91d0) }

var fileDescriptor_rpc_e1404ce40aeb91d0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x49, 0xd7, 0x55, 0x3b, 0xad, 0xa0, 0xe3, 0xbf, 0xa5, 0x07, 0x09, 0x3d, 0x2d, 0x08,
	0x3d, 0xd4, 0x4b, 0xf1, 0x56, 0x44, 0xc5, 0x83, 0x20, 0x39, 0xe8, 0x39, 0x6e, 0xa6, 0x50, 0x1a,
	0x37, 0x31, 0xc9, 0x8a, 0xfd, 0xf6, 0x92, 0x6c, 0x6b, 0x17, 0x7a, 0x09, 0xef, 0xbd, 0x84, 0xf9,
	0xe5, 0x25, 0xd0, 0x77, 0xb6, 0x9a, 0x58, 0x67, 0x82, 0xc1, 0xcc, 0xd9, 0x6a, 0x6c, 0x01, 0x5f,
	0xc9, 0xad, 0x34, 0x09, 0x63, 0x82, 0x20, 0x6f, 0x4d, 0xed, 0x09, 0x39, 0x0c, 0x6a, 0xa3, 0x68,
	0xae, 0x94, 0x23, 0xef, 0x0b, 0xc6, 0x59, 0xd9, 0x17, 0xdd, 0x08, 0x0b, 0x38, 0x5a, 0xfa, 0x77,
	0xa9, 0x97, 0xaa, 0xe8, 0x71, 0x56, 0x1e, 0x8b, 0xad, 0xc5, 0x1b, 0x80, 0xaf, 0xff, 0x89, 0x45,
	0xc6, 0x59, 0x39, 0x14, 0x9d, 0x64, 0x3c, 0x87, 0xb3, 0x2e, 0xf1, 0xbb, 0x21, 0x1f, 0xe2, 0x38,
	0x4d, 0x72, 0xf1, 0xa2, 0x7e, 0x13, 0x2c, 0x17, 0x5b, 0x8b, 0x08, 0x07, 0x51, 0x26, 0xca, 0x50,
	0x24, 0x3d, 0xae, 0x21, 0x7f, 0x73, 0xc6, 0x2c, 0xf0, 0x16, 0x72, 0x1b, 0x45, 0xc1, 0x78, 0x56,
	0x0e, 0xa6, 0x97, 0x93, 0xd8, 0x2e, 0x6d, 0xb5, 0xeb, 0x63, 0x1d, 0xdc, 0x5a, 0xb4, 0x67, 0x46,
	0x33, 0x80, 0x5d, 0x88, 0xa7, 0x90, 0xad, 0x68, 0xbd, 0xa9, 0x16, 0x25, 0x5e, 0x40, 0xfe, 0x23,
	0x75, 0x43, 0x1b, 0x54, 0x6b, 0xee, 0x7b, 0x33, 0x36, 0xfd, 0x80, 0x93, 0x67, 0x0a, 0xbb, 0x5b,
	0xe3, 0x13, 0x9c, 0x3f, 0x48, 0x5d, 0x35, 0x5a, 0x06, 0xea, 0xc4, 0x57, 0x89, 0xbf, 0xd7, 0x6e,
	0x74, 0xbd, 0x97, 0xb7, 0xef, 0xfc, 0x79, 0x98, 0x7e, 0xe2, 0xee, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0x56, 0xd3, 0xa1, 0x96, 0x01, 0x00, 0x00,
}
